const http = require('http');
const crypto = require('crypto');

// Test webhook with proper signature
const testWebhookWithSignature = () => {
  const payload = JSON.stringify({
    type: 'checkout.session.completed',
    data: {
      object: {
        id: 'cs_test_123',
        amount_total: 3000, // £30.00
        payment_intent: 'pi_test_123',
        customer_details: {
          email: 'test@example.com',
          name: 'Test User'
        },
        metadata: {
          type: 'pay_as_you_go',
          userId: 'test_user_id',
          userEmail: 'test@example.com',
          credits: '1'
        }
      }
    }
  });

  // Create a fake signature (in real Stripe, this would be generated by Stripe)
  const timestamp = Math.floor(Date.now() / 1000);
  const fakeSecret = 'whsec_test_secret';
  const signedPayload = `${timestamp}.${payload}`;
  const signature = crypto
    .createHmac('sha256', fakeSecret)
    .update(signedPayload, 'utf8')
    .digest('hex');
  
  const stripeSignature = `t=${timestamp},v1=${signature}`;

  const options = {
    hostname: 'localhost',
    port: 3000,
    path: '/api/webhooks/stripe',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': Buffer.byteLength(payload),
      'stripe-signature': stripeSignature
    }
  };

  const req = http.request(options, (res) => {
    console.log(`Status: ${res.statusCode}`);
    
    let responseData = '';
    res.on('data', (chunk) => {
      responseData += chunk;
    });
    
    res.on('end', () => {
      console.log('Response:', responseData);
      if (res.statusCode === 200) {
        console.log('✅ Webhook endpoint is working correctly!');
      } else {
        console.log('❌ Webhook endpoint returned an error');
      }
    });
  });

  req.on('error', (e) => {
    console.error(`Problem with request: ${e.message}`);
  });

  req.write(payload);
  req.end();
};

console.log('Testing webhook endpoint with signature...');
testWebhookWithSignature();
